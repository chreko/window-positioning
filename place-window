#!/usr/bin/env bash
# place-window: Position windows in dom0 with mouse selection or window ID
# Usage:
#   place-window                  # Interactive mode
#   place-window ul|ur|ll|lr|c    # Quick presets
#   place-window <X> <Y> <W> <H>  # Custom geometry
#   place-window ws <N>           # Move to workspace N (0-based)
#   place-window save <name>      # Save current window position
#   place-window load <name>      # Load saved position

set -euo pipefail

echo "=== SCRIPT STARTING ==="

# Global associative array will be declared in windows.sh

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source all library modules
source "$SCRIPT_DIR/lib/config.sh"
source "$SCRIPT_DIR/lib/monitors.sh" 
source "$SCRIPT_DIR/lib/windows.sh"
source "$SCRIPT_DIR/lib/layouts.sh"
source "$SCRIPT_DIR/lib/daemon.sh"
source "$SCRIPT_DIR/lib/interactive.sh"
source "$SCRIPT_DIR/lib/advanced.sh"

# Initialize configuration
init_config
load_config

# Check if this command needs window list initialization
needs_initialization() {
    case "${1:-}" in
        ""|test-init|debug-lists)
            return 0  # Needs initialization
            ;;
        watch)
            [[ "${2:-}" == "daemon" ]] && return 0
            return 1  # Watch management commands don't need init
            ;;
        *)
            return 1  # Commands using daemon don't need client initialization
            ;;
    esac
}

# Initialize window lists only for commands that need them
if needs_initialization "${1:-}" "${2:-}"; then
    ensure_initialized_once
fi

# Check if running in daemon mode (prevent interactive prompts)
DAEMON_MODE=${DAEMON_MODE:-false}

# Main command processing
case "${1:-}" in
    "")
        # No arguments - interactive mode
        interactive_mode
        ;;
    ul|ur|ll|lr|c|left|right|top|bottom|maximize)
        # Preset layout
        id=$(pick_window)
        apply_preset "$1" "$id"
        ;;
    ws)
        # Move to workspace
        if [[ -z "${2:-}" ]]; then
            echo "Error: Workspace number required"
            exit 1
        fi
        id=$(pick_window)
        move_to_workspace "$id" "$2"
        ;;
    save)
        # Save current position
        if [[ -z "${2:-}" ]]; then
            echo "Error: Position name required"
            exit 1
        fi
        id=$(pick_window)
        save_position "$2" "$id"
        ;;
    load)
        # Load saved position
        if [[ -z "${2:-}" ]]; then
            echo "Error: Position name required"
            exit 1
        fi
        id=$(pick_window)
        load_position "$2" "$id"
        ;;
    list)
        # List saved presets
        echo "Available presets:"
        grep -v '^#' "$PRESETS_FILE" | cut -d= -f1 | sed 's/^/  - /'
        ;;
    test-init)
        # Test initialization functionality
        test_initialization
        ;;
    debug-lists)
        # Show all stored window lists
        debug_window_lists
        ;;
    monitors)
        # Show monitor information
        get_screen_info
        echo "Screen Resolution: ${SCREEN_W:-Unknown}x${SCREEN_H:-Unknown}"
        echo "Detected Monitors:"
        for i in "${!MONITORS[@]}"; do
            IFS=':' read -r name mx my mw mh <<< "${MONITORS[i]}"
            echo "  Monitor $((i+1)): $name (${mw}x${mh}+${mx}+${my})"
            
            layout_area=$(get_monitor_layout_area "${MONITORS[i]}")
            IFS=':' read -r ux uy uw uh <<< "$layout_area"
            echo "    Usable area: ${uw}x${uh}+${ux}+${uy} (with gaps)"
        done
        
        if [[ ${#MONITORS[@]} -gt 1 ]]; then
            echo ""
            echo "Multi-monitor features:"
            echo "- Windows positioned on their current monitor"
            echo "- Panel height applied only to primary monitor"
            echo "- Auto-layout groups windows per monitor"
        fi
        ;;
    auto)
        # Auto-layout - apply to current monitor by default, all monitors with --all - route through daemon
        if [[ "${2:-}" == "--all" ]]; then
            send_daemon_command "auto --all"
        else
            send_daemon_command "auto"
        fi
        ;;
    resize)
        # Simultaneous resize with adjacent windows
        case "${2:-}" in
            expand-right|shrink-right|expand-down|shrink-down)
                simultaneous_resize "$2" "${3:-50}"
                ;;
            *)
                echo "Resize commands:"
                echo "  place-window resize expand-right [pixels]   Expand right, shrink adjacent"
                echo "  place-window resize shrink-right [pixels]   Shrink right, expand adjacent"
                echo "  place-window resize expand-down [pixels]    Expand down, shrink adjacent"
                echo "  place-window resize shrink-down [pixels]    Shrink down, expand adjacent"
                echo ""
                echo "Default resize amount: 50 pixels"
                ;;
        esac
        ;;
    master)
        # Master-stack layouts - route through daemon for window list access
        case "${2:-}" in
            vertical|horizontal)
                # Parse percentage and validate
                if [[ "${3:-}" == "--all" ]]; then
                    percentage="${4:-60}"
                    if [[ "$percentage" =~ ^[0-9]+$ && $percentage -ge 10 && $percentage -le 90 ]]; then
                        send_daemon_command "master $2 --all $percentage"
                    else
                        echo "Error: Percentage must be between 10 and 90"
                        exit 1
                    fi
                else
                    percentage="${3:-60}"
                    if [[ "$percentage" =~ ^[0-9]+$ && $percentage -ge 10 && $percentage -le 90 ]]; then
                        send_daemon_command "master $2 $percentage"
                    else
                        echo "Error: Percentage must be between 10 and 90"
                        exit 1
                    fi
                fi
                ;;
            center)
                # Center master layout (current monitor only)
                percentage="${3:-50}"
                if [[ "$percentage" =~ ^[0-9]+$ && $percentage -ge 20 && $percentage -le 80 ]]; then
                    send_daemon_command "master center $percentage"
                else
                    echo "Error: Center width percentage must be between 20 and 80"
                    exit 1
                fi
                ;;
            *)
                echo "Master layout commands:"
                echo "  place-window master vertical [percentage]   Master on left, stack on right - current monitor"
                echo "  place-window master horizontal [percentage] Master on top, stack on bottom - current monitor"
                echo "  place-window master center [percentage]     Center master with sidebars - current monitor"
                echo "  place-window master vertical --all [percentage]   Apply to all monitors"
                echo "  place-window master horizontal --all [percentage] Apply to all monitors"
                echo ""
                echo "Default master percentage: 60% (range: 10-90)"
                echo "Default center percentage: 50% (range: 20-80)"
                echo ""
                echo "Note: Master commands require the daemon for window list access."
                echo "Start daemon with: place-window watch start"
                ;;
        esac
        ;;
    focus)
        # Focus navigation - route through daemon for window list access
        case "${2:-}" in
            next|prev|up|down|left|right)
                send_daemon_command "focus $2"
                ;;
            *)
                echo "Focus navigation commands:"
                echo "  place-window focus next     Focus next window in sequence"
                echo "  place-window focus prev     Focus previous window in sequence"
                echo "  place-window focus up       Focus window above current"
                echo "  place-window focus down     Focus window below current"
                echo "  place-window focus left     Focus window to the left"
                echo "  place-window focus right    Focus window to the right"
                echo ""
                echo "Note: Focus commands require the daemon for window list access."
                echo "Start daemon with: place-window watch start"
                ;;
        esac
        ;;
    minimize-others)
        # Minimize all windows except active one
        minimize_others
        ;;
    swap)
        # Window swapping (2 selected windows) - route through daemon for persistent state
        send_daemon_command "swap"
        ;;
    cycle)
        # Window cycling (all windows on current monitor) - route through daemon for persistent state
        case "${2:-}" in
            counter-clockwise)
                send_daemon_command "cycle counter-clockwise"
                ;;
            clockwise|"")
                send_daemon_command "cycle clockwise"
                ;;
            *)
                echo "Window cycle commands:"
                echo "  place-window cycle                   Cycle all window positions clockwise (default)"
                echo "  place-window cycle clockwise         Cycle all window positions clockwise"
                echo "  place-window cycle counter-clockwise Cycle all window positions counter-clockwise"
                echo ""
                echo "Note: Cycle commands require the daemon for window list persistence."
                echo "Start daemon with: place-window watch start"
                ;;
        esac
        ;;
    watch)
        # Watch mode for automatic window tiling
        case "${2:-}" in
            start)
                if is_daemon_running; then
                    echo "âœ“ Daemon already running (PID: $(get_daemon_pid))"
                    exit 0
                fi
                echo "Starting window-positioning daemon..."
                nohup "$0" watch daemon > ~/.config/window-positioning/daemon.log 2>&1 &
                sleep 1
                if is_daemon_running; then
                    echo "âœ“ Daemon started successfully (PID: $(get_daemon_pid))"
                else
                    echo "âœ— Failed to start daemon"
                    echo "Check: tail ~/.config/window-positioning/daemon.log"
                    exit 1
                fi
                ;;
            stop)
                if ! is_daemon_running; then
                    echo "âœ— Daemon is not running"
                    exit 1
                fi
                echo "Stopping window-positioning daemon..."
                pkill -f "place-window.*watch.*daemon"
                echo "âœ“ Daemon stopped"
                ;;
            status)
                if is_daemon_running; then
                    echo "âœ“ Watch mode is running (XDG autostart)"
                    echo "PID: $(get_daemon_pid)"
                    echo "Autostart: $([ -f ~/.config/autostart/window-positioning.desktop ] && echo 'enabled' || echo 'disabled')"
                else
                    echo "âœ— Watch mode is not running"
                    echo "Start with: place-window watch start"
                fi
                ;;
            enable)
                if [ -f ~/.config/autostart/window-positioning.desktop ]; then
                    echo "âœ“ Auto-start already enabled (XDG autostart)"
                else
                    echo "âœ— Auto-start not configured"
                    echo "Run install script to set up XDG autostart"
                fi
                ;;
            disable)
                if [ -f ~/.config/autostart/window-positioning.desktop ]; then
                    echo "Disabling auto-start..."
                    rm ~/.config/autostart/window-positioning.desktop
                    echo "âœ“ Auto-start disabled"
                else
                    echo "âœ“ Auto-start already disabled"
                fi
                ;;
            restart)
                echo "Restarting window-positioning daemon..."
                if is_daemon_running; then
                    pkill -f "place-window.*watch.*daemon"
                    sleep 1
                fi
                nohup "$0" watch daemon > ~/.config/window-positioning/daemon.log 2>&1 &
                sleep 1
                if is_daemon_running; then
                    echo "âœ“ Daemon restarted successfully (PID: $(get_daemon_pid))"
                else
                    echo "âœ— Failed to restart daemon"
                    exit 1
                fi
                ;;
            logs)
                echo "Recent logs from window-positioning daemon:"
                if [ -f ~/.config/window-positioning/daemon.log ]; then
                    tail -50 ~/.config/window-positioning/daemon.log
                else
                    echo "No log file found at ~/.config/window-positioning/daemon.log"
                fi
                ;;
            toggle)
                toggle_daemon
                ;;
            daemon)
                # Internal daemon mode - called by XDG autostart or manually
                DAEMON_MODE=true
                watch_daemon
                ;;
            *)
                echo "Watch mode commands (XDG autostart daemon):"
                echo "  place-window watch start     Start the daemon"
                echo "  place-window watch stop      Stop the daemon"
                echo "  place-window watch toggle    Toggle auto-layout on/off (daemon keeps running)"
                echo "  place-window watch restart   Restart the daemon"
                echo "  place-window watch status    Check daemon status and auto-layout state"
                echo "  place-window watch enable    Check auto-start status"
                echo "  place-window watch disable   Remove auto-start"
                echo "  place-window watch logs      View daemon logs"
                echo ""
                echo "The daemon provides IPC for window commands and optionally"
                echo "monitors window events to automatically apply layouts."
                echo ""
                echo "Auto-start is configured via XDG autostart:"
                echo "  ~/.config/autostart/window-positioning.desktop"
                ;;
        esac
        ;;
    config)
        # Configuration management
        case "${2:-}" in
            gap)
                if [[ -z "${3:-}" ]]; then
                    echo "Current gap: ${GAP}px"
                else
                    if [[ "$3" =~ ^[0-9]+$ ]]; then
                        update_setting "GAP" "$3"
                        GAP=$3
                        echo "Gap set to ${3}px"
                    else
                        echo "Error: Gap must be a number"
                        exit 1
                    fi
                fi
                ;;
            panel)
                if [[ -z "${3:-}" ]]; then
                    echo "Current panel height: ${PANEL_HEIGHT}px"
                else
                    if [[ "$3" =~ ^[0-9]+$ ]]; then
                        update_setting "PANEL_HEIGHT" "$3"
                        PANEL_HEIGHT=$3
                        echo "Panel height set to ${3}px"
                    else
                        echo "Error: Panel height must be a number"
                        exit 1
                    fi
                fi
                ;;
            autohide)
                if [[ -z "${3:-}" ]]; then
                    echo "Current panel auto-hide: ${PANEL_AUTOHIDE}"
                else
                    if [[ "$3" == "true" || "$3" == "false" ]]; then
                        update_setting "PANEL_AUTOHIDE" "$3"
                        PANEL_AUTOHIDE=$3
                        echo "Panel auto-hide set to $3"
                    else
                        echo "Error: Panel auto-hide must be 'true' or 'false'"
                        exit 1
                    fi
                fi
                ;;
            show)
                echo "Current configuration:"
                echo "  Gap: ${GAP}px"
                echo "  Panel height: ${PANEL_HEIGHT}px"
                echo "  Panel auto-hide: ${PANEL_AUTOHIDE}"
                echo "  Decoration height: ${DECORATION_HEIGHT}px"
                echo "  Decoration width: ${DECORATION_WIDTH}px"
                echo "  Min width: ${MIN_WIDTH}px"
                echo "  Min height: ${MIN_HEIGHT}px"
                ;;
            detect-decorations)
                auto_detect_decorations
                ;;
            *)
                echo "Configuration commands:"
                echo "  place-window config gap [pixels]        Set/show gap size"
                echo "  place-window config panel [pixels]      Set/show panel height"
                echo "  place-window config autohide [true/false] Set/show panel auto-hide"
                echo "  place-window config show                Show all settings"
                echo "  place-window config detect-decorations  Auto-detect window decorations"
                ;;
        esac
        ;;
    [0-9]*)
        # Custom coordinates: X Y Width Height
        if [[ $# -eq 4 ]]; then
            id=$(pick_window)
            apply_geometry "$id" "$1" "$2" "$3" "$4"
        else
            echo "Error: Custom coordinates require 4 arguments: X Y Width Height"
            exit 1
        fi
        ;;
    *)
        # Show help
        cat << 'EOF'
place-window: Advanced window positioning and tiling for QubesOS dom0

Basic Usage:
  place-window                    Interactive menu
  place-window ul|ur|ll|lr        Upper/lower left/right quarters
  place-window left|right         Left/right halves  
  place-window top|bottom         Top/bottom halves
  place-window c|maximize         Center/maximize window
  place-window <X> <Y> <W> <H>    Custom coordinates

Auto-layout system:
  place-window auto               Auto-arrange current monitor
  place-window auto --all         Auto-arrange all monitors

Master-stack layouts:
  place-window master vertical [%]    Master on left (current monitor)
  place-window master horizontal [%]  Master on top (current monitor)
  place-window master center [%]      Center master with sidebars (current monitor)
  place-window master vertical --all [%]  Apply to all monitors

Focus navigation:
  place-window focus next/prev     Cycle through windows
  place-window focus up/down/left/right  Navigate geometrically

Watch mode (automatic tiling daemon):
  place-window watch start        Start automatic tiling daemon
  place-window watch stop         Stop the daemon
  place-window watch status       Check daemon status
  place-window watch toggle       Toggle daemon on/off
  
  Watch mode monitors window changes and automatically applies the last-used
  layout per workspace. Responds to window creation, minimize, and maximize.

Advanced operations:
  place-window resize expand-right 50   Simultaneous resize with adjacent windows
  place-window swap                     Swap positions of two selected windows
  place-window cycle                    Rotate all window positions clockwise (default)
  place-window cycle counter-clockwise  Rotate all window positions counter-clockwise
  place-window minimize-others          Minimize all except active window

Position management:
  place-window save <name>        Save current window position
  place-window load <name>        Load saved position
  place-window list               List all saved presets
  place-window ws <N>             Move window to workspace N

Configuration:
  place-window config gap 15      Set gap size to 15 pixels
  place-window config panel 40    Set panel height to 40 pixels  
  place-window config show        Show all current settings
  place-window monitors           Show monitor layout information

Examples:
  place-window                    # Interactive menu
  place-window auto               # Auto-arrange current monitor
  place-window auto --all         # Auto-arrange all monitors
  place-window watch start        # Start automatic tiling daemon
  place-window master vertical    # Master-stack with master on left (60%) - current monitor
  place-window master vertical 70 # Master-stack with 70% master, 30% stack - current monitor
  place-window master vertical --all 60 # Master-stack on all monitors (60%)

Multi-monitor support:
- Commands operate on the current monitor by default
- Use --all flag to apply layouts to all monitors  
- Panel height is only applied to the primary monitor
- Each monitor maintains independent window groupings
EOF
        ;;
esac